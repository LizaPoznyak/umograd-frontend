import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import "../styles/TasksPage.css";
import Navbar from "../components/Navbar.tsx";
import "../components/Layout.css";
import Footer from "../components/Footer.tsx";
import Loader from "../components/Loader.tsx";
import Image from "../assets/tasks-img.png";

type Task = {
    id: number | null;
    sourceId: string | null;
    title: string;
    description: string;
    minAge: number;
    maxAge: number;
    difficulty: string;
};

export default function TasksPage() {
    const [tasks, setTasks] = useState<Task[]>([]);
    const [loading, setLoading] = useState(false);
    const [selectedDifficulty, setSelectedDifficulty] = useState<string | null>(null);
    const [activeTab, setActiveTab] = useState<"recommend" | "all">("recommend");

    const navigate = useNavigate();

    useEffect(() => {
        const loadTasks = async () => {
            try {
                setLoading(true);
                const res = await fetch("http://localhost:8181/tasks", {
                    headers: {
                        Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
                    },
                });
                if (res.ok) {
                    const data = await res.json();
                    setTasks(data);
                } else {
                    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π", res.status);
                }
            } catch (err) {
                console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", err);
            } finally {
                setLoading(false);
            }
        };
        loadTasks();
    }, []);

    const handleStart = async (taskId: number | null) => {
        if (!taskId) {
            alert("–£ —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ ID, –µ–≥–æ –Ω–µ–ª—å–∑—è –Ω–∞—á–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é");
            return;
        }
        const childId = localStorage.getItem("childId");
        if (!childId) {
            alert("–ù–µ –Ω–∞–π–¥–µ–Ω childId –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞–Ω–∏—è");
            return;
        }

        try {
            setLoading(true);
            const res = await fetch(
                `http://localhost:8181/task-results/${taskId}/start?childId=${childId}`,
                {
                    method: "POST",
                    headers: {
                        Authorization: `Bearer ${localStorage.getItem("accessToken")}`,
                    },
                }
            );
            if (res.ok) {
                const taskResult = await res.json();
                navigate(`/tasks/${taskId}/execute/${taskResult.id}`);
            } else {
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–¥–∞–Ω–∏—è");
            }
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", err);
        } finally {
            setLoading(false);
        }
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const filteredTasks = selectedDifficulty
        ? tasks.filter((t) => t.difficulty === selectedDifficulty)
        : tasks;

    return (
        <div className="app-layout">
            <Navbar />
            <main className="app-main tasks-center">
                <div className="tasks-container">
                    {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
                    <div className="tasks-bar">
                        <div className="tabs">
                            <div
                                className={`tab ${activeTab === "recommend" ? "active" : ""}`}
                                onClick={() => setActiveTab("recommend")}
                            >
                                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                            </div>
                            <div
                                className={`tab ${activeTab === "all" ? "active" : ""}`}
                                onClick={() => setActiveTab("all")}
                            >
                                –í—Å–µ
                            </div>
                        </div>

                        <div className="filter-box">
                            <div className="filter-header">
                                <span className="filter-title">–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è</span>
                                {selectedDifficulty && (
                                    <div
                                        className="filter-reset"
                                        onClick={() => setSelectedDifficulty(null)}
                                    >
                                        <span>–£–±—Ä–∞—Ç—å</span>
                                        <span className="close">√ó</span>
                                    </div>
                                )}
                            </div>

                            <div className="filter-options">
                                <div
                                    className={`filter-option ${
                                        selectedDifficulty === "EASY" ? "active" : ""
                                    }`}
                                    onClick={() => setSelectedDifficulty("EASY")}
                                >
                                    üî•
                                </div>
                                <div
                                    className={`filter-option ${
                                        selectedDifficulty === "MEDIUM" ? "active" : ""
                                    }`}
                                    onClick={() => setSelectedDifficulty("MEDIUM")}
                                >
                                    üî•üî•
                                </div>
                                <div
                                    className={`filter-option ${
                                        selectedDifficulty === "HARD" ? "active" : ""
                                    }`}
                                    onClick={() => setSelectedDifficulty("HARD")}
                                >
                                    üî•üî•üî•
                                </div>
                            </div>
                        </div>
                    </div>

                    {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π */}
                    <div className={`tasks-list ${filteredTasks.length === 0 ? "empty" : ""}`}>
                        {filteredTasks.length === 0 ? (
                            <div className="no-tasks">
                                –ó–∞–¥–∞–Ω–∏–π —Å —Ç–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∫–∞ –Ω–µ—Ç
                            </div>
                        ) : (
                            filteredTasks.map((task) => (
                                <div key={task.id ?? task.sourceId} className="tasks-item">
                                    <img src={Image} alt="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–¥–∞–Ω–∏—è" className="tasks-img"/>
                                    <div className="tasks-info-btn">
                                        <div className="tasks-info">
                                            <p className="tasks-title">{task.title}</p>
                                            <div className="tasks-description-diff">
                                                <p className="tasks-description" title={task.description}>
                                                    {task.description}
                                                </p>
                                                <p className="tasks-diff">
                                                    {task.difficulty === "EASY" && "üî•"}
                                                    {task.difficulty === "MEDIUM" && "üî•üî•"}
                                                    {task.difficulty === "HARD" && "üî•üî•üî•"}
                                                </p>
                                            </div>
                                        </div>
                                        <button
                                            className="tasks-btn"
                                            onClick={() => handleStart(task.id)}
                                            disabled={loading}
                                        >
                                            {loading ? "–°—Ç–∞—Ä—Ç..." : "–ù–∞—á–∞—Ç—å"}
                                        </button>
                                    </div>
                                </div>
                            ))
                        )}
                    </div>
                </div>
                {loading && <Loader/>}
            </main>
            <Footer/>
        </div>
    );
}